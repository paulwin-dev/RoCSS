{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Current Version: 1.0.1</p> <p>RoCSS is a Luau module designed for Roblox that allows users to write CSS-like code in the form of <code>Luau Dictionaries</code>. It currently supports property setting, hover effects active effects, and transitions. You can find the GitHub repository here and the Roblox model here.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#version-110","title":"Version 1.1.0","text":"<p>Added 'active' field to class style definitions</p>"},{"location":"changelog/#version-101","title":"Version 1.0.1","text":"<p>You can now initialize RoCSS without providing a stylesheet</p> <p>RoCSS will scan through descendants of ReplicatedStorage to find any modules whose names end with .rcss and initialize those</p>"},{"location":"changelog/#version-100","title":"Version 1.0.0","text":"<p>Initial Publish</p>"},{"location":"classes/","title":"Using Classes","text":"<p>RoCSS utilizes Roblox's <code>CollectionService</code> to obtain a table of GUI elements it should apply certain styles to.</p> Tagging Elements <p>To let RoCSS know that it should apply a style to a certain GUI element, we have to add a <code>Tag</code> to the object. To add a <code>tag</code> to an instance, scroll down in the  <code>Properties</code> window until you see the <code>Tags</code> section. Then, click on the <code>+</code> icon to add a tag to it. This <code>tag</code> should be the name of the <code>class</code> you wish the <code>element</code> to be a part of.</p>"},{"location":"example/","title":"Full Example","text":"Info <p>This example assumes that you've inserted RoCSS into <code>game.ReplicatedStorage</code> along with a module script called \"styles\" and that you've added at <code>LocalScript</code> instance into <code>game.StarterPlayer.StarterPlayerScripts</code>.</p> <p>In this example, we will be making a <code>Class</code> called \"Example\" with a black <code>BackgroundColor3</code> that rotates <code>45\u00b0</code> whenever we hover over it.</p>"},{"location":"example/#creating-the-gui-element","title":"Creating the GUI Element","text":"<p>First off, let's create a <code>ScreenGui</code> instance inside of <code>game.StarterGui</code>. Inside of this <code>ScreenGui</code>, add a new <code>Frame</code> instance. You should see a white square appear on your screen. </p>"},{"location":"example/#tagging-the-element","title":"Tagging the Element","text":"<p>Next, we need to make this GUI element a member of a <code>Class</code> called <code>Example</code>. Select the <code>Frame</code> scroll down in the <code>Properties</code> window until you see the <code>Tags</code> section. Click on the <code>+</code> icon next to the <code>Tags</code> header and type <code>Example</code> into the text box that appears. Now, press enter to create a new <code>tag</code> called <code>Example</code>.</p>"},{"location":"example/#changing-the-background-color","title":"Changing the Background Color","text":"<p>Now that we've created a new <code>Frame</code> and made it a member of our <code>Example</code> class, let's style any <code>Example</code> class members to have a black <code>BackgroundColor3</code>. Open the styles <code>ModuleScript</code>:</p> <pre><code>return {\n    Example = { -- create a section for our class\n        BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- change the BackgroundColor3 of any Example class members to black\n    }\n}\n</code></pre>"},{"location":"example/#initializing-rocss","title":"Initializing RoCSS","text":"<p>Now that we've created a very simple <code>class</code>, let's initialize RoCSS and style our elements! Open your <code>LocalScript</code>:</p> <pre><code>local RoCSS = require(game.ReplicatedStorage.RoCSS)\nlocal styles = require(game.ReplicatedStorage.styles)\n\ntask.wait(2)\n\nRoCSS.init(styles)\n</code></pre> Warning <p>Due to RoCSS relying on <code>CollectionService</code> to get all members of a class, you must wait until all GUI elements have been replicated before you initialize it. Not waiting will lead to an empty <code>CollectionService:GetTagged()</code> table and no class members being recognized.</p> <p>You should now have a white Frame that turns black after a couple seconds.</p>"},{"location":"example/#adding-a-hover-effect","title":"Adding a Hover Effect","text":"<p>In addition to supporting regular property changing, RoCSS also supports hover effects by adding a <code>Dictionary</code> called \"onhover\" into the class information. We will be making our <code>Frame</code> smoothly rotate <code>45\u00b0</code> on hover, so open your styles <code>ModuleScript</code> again:</p> <pre><code>return {\n    Example = {\n        BackgroundColor3 = Color3.fromRGB(0, 0, 0),\n        onhover = {\n            Rotation = 45, -- change the rotation of class members to 45\u00b0 on hover\n        }\n    }\n}\n</code></pre> <p>Click on Play, and you should now have a black frame that rotates 45 degrees when you hover over it, but something is missing...</p>"},{"location":"example/#smooth-transitions","title":"Smooth Transitions","text":"<p>While our <code>Frame</code> now rotates 45\u00b0 when we hover over it, it does so instantly. This doesn't look good, so let's make it smoothly transition in one second. To do this, we will utilize the <code>transition</code> and <code>transition_time</code> values in our class info <code>dictionary</code>:</p> <pre><code>return {\n    Example = {\n        transition = {\"Rotation\"}, -- a table of all properties you wish to smoothly transition\n        transition_time = 1, -- specify how long you want the transition to take\n        BackgroundColor3 = Color3.fromRGB(0, 0, 0),\n        onhover = {\n            Rotation = 45,\n        }\n    }\n}\n</code></pre> <p>Congrats! You should now have a <code>Frame</code> with a black background that smoothly rotates <code>45\u00b0</code> in one second when your mouse enters it and transitions back to a rotation of 0\u00b0 when your mouse leaves the <code>Frame</code>.</p> Info <p>Once you've set up your class, you can add as many members as you wish to it by adding the class name as a tag in those objects!</p>"},{"location":"example/#final-scripts","title":"Final Scripts","text":"<p>styles <code>ModuleScript</code>:</p> <pre><code>return {\n    Example = { -- create a section for our class\n        transition = {\"Rotation\"}, -- a table of all properties you wish to smoothly transition\n        transition_time = 1, -- specify how long you want the transition to take\n        BackgroundColor3 = Color3.fromRGB(0, 0, 0), -- change the BackgroundColor3 of any Example class members to black\n        onhover = {\n            Rotation = 45, -- change the rotation of class members to 45\u00b0 on hover\n        },\n    },\n}\n</code></pre> <p><code>LocalScript</code>: <pre><code>local RoCSS = require(game.ReplicatedStorage.RoCSS)\nlocal styles = require(game.ReplicatedStorage.styles)\n\ntask.wait(2)\n\nRoCSS.init(styles)\n</code></pre></p>"},{"location":"installation/","title":"Installation","text":"<p>To install <code>RoCSS</code>, you can either download the model directly from the <code>Roblox</code> page or copy the code from <code>GitHub</code> </p> Installation via Roblox <ul> <li>Add the RoCSS <code>model</code> to your inventory from this link</li> <li>Open an experience and insert it into your game by clicking on the Your Models tab in the <code>Toolbox</code> and clicking on the <code>RoCSS</code> model</li> </ul> Copying the code from GitHub <ul> <li>Go to the GitHub repository by clicking this link</li> <li>Copy the <code>RoCSS</code> file and paste it into your game</li> </ul>"},{"location":"setup/","title":"Setup","text":"Important <p>The module must placed somewhere accessible to the <code>client</code>. It is common practice to put services like RoCSS into <code>ReplicatedStorage</code>, just make sure it's not located in <code>ServerScriptService</code> or <code>ServerStorage</code>. The examples on this website will assume it's located in <code>ReplicatedStorage</code>.</p>"},{"location":"setup/#initializing-the-module","title":"Initializing the Module","text":"<p>In order for RoCSS to work, you will need <code>two</code> scripts: a <code>LocalScript</code> to initialize RoCSS and a <code>ModuleScript</code> to define your styles.</p> <p>Add a new <code>ModuleScript</code> instance to <code>game.ReplicatedStorage</code>. You can name it whatever you want, the examples on this page will assume it's called \"styles\". This module script is where you'll be defining your styles. The general syntax shoud look like this: <pre><code>return {\n    [\"ClassName\"] = {\n        Property = Value\n    }\n}\n</code></pre></p> <p>Next, we need to <code>initialize</code> the module. Create a new <code>LocalScript</code> instance inside of <code>game.StarterPlayer.StarterPlayerScripts</code>: <pre><code>local RoCSS = require(game.ReplicatedStorage.RoCSS) -- require the RoCSS module\nlocal styles = require(game.ReplicatedStorage.styles) -- require our stylesheet\n\nRoCSS.init(styles) -- to initialize RoCSS with our stylesheet, pass it as a parameter into the .init() function\n</code></pre></p>"},{"location":"syntax/","title":"Syntax Reference","text":""},{"location":"syntax/#basic-syntax","title":"Basic Syntax","text":"<p><pre><code>Property = Value\n</code></pre> Class information should always be in the <code>Property = Value</code> format. This applies to every item in the dictionary. For example, to change the <code>Transparency</code>, your line of code should look like this:</p> <pre><code>Transparency = .5,\n</code></pre> Tip <p>Don't forget your commas! Class info is still just a dictionary.</p>"},{"location":"syntax/#advanced-syntax","title":"Advanced Syntax","text":"<p>In addition to basic <code>Properties</code>, RoCSS supports transition and hover values.</p>"},{"location":"syntax/#transition","title":"transition","text":"<p><pre><code>transition: {string}\n</code></pre> The transition key in a class info <code>dictionary</code> should be a <code>table</code> of properties that should be smoothly transitioned.</p> Warning <p>The <code>transition</code> table should not contain the value you wish the properties to be. Those are still defined in the onhover dictionary.</p>"},{"location":"syntax/#transition_time","title":"transition_time","text":"<p><pre><code>transition_time: number\n</code></pre> The <code>transition_time</code> key defines the time it should take all of the properties in the transition table to transition from value a to value b.</p>"},{"location":"syntax/#onhover","title":"onhover","text":"<p><pre><code>onhover: {string: any}\n</code></pre> The <code>onhover</code> key defines a dictionary of properties and their respective values that will be changed when a user's mouse enters a member of the class. All properties in this dictionary will be immediately changed unless listed in the transition table, in which case they will be <code>tweened</code> in the time defined as the transition_time key.</p>"},{"location":"syntax/#active","title":"active","text":"<p><pre><code>active: {string: any}\n</code></pre> The <code>active</code> key defines a dictionary of properties and their respective values that will be changed when a user clicks their mouse on a member of the class. All properties in this dictionary will be immediately changed unless listed in the transition table, in which case they will be <code>tweened</code> in the time defined as the transition_time key.</p>"}]}